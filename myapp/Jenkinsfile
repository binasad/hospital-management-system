pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'hospital-management-tests'
        DOCKER_TAG = 'latest'
    }
    
    stages {
        stage('Checkout') {
            steps {
                // Checkout code from GitHub
                checkout scm
                echo 'Code checked out successfully'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image for tests
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                    echo 'Docker image built successfully'
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                script {
                    // Run tests in Docker container
                    docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").inside('--shm-size=2g') {
                        sh 'python -m pytest tests/ -v --html=test-results/report.html --self-contained-html'
                    }
                }
            }
            post {
                always {
                    // Publish test results
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'test-results',
                        reportFiles: 'report.html',
                        reportName: 'Test Report'
                    ])
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                script {
                    // Clean up Docker images
                    sh 'docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true'
                    echo 'Cleanup completed'
                }
            }
        }
    }
    
    post {
        always {
            // Clean workspace
            cleanWs()
        }
        success {
            emailext (
                subject: "SUCCESS: Hospital Management Tests - Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: """
                    <h2>Test Execution Successful!</h2>
                    <p><strong>Job:</strong> ${env.JOB_NAME} [${env.BUILD_NUMBER}]</p>
                    <p><strong>Build URL:</strong> <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>
                    <p><strong>Status:</strong> All tests passed successfully</p>
                    <p><strong>Duration:</strong> ${currentBuild.durationString}</p>
                    <br>
                    <p>This email was automatically generated by Jenkins CI/CD pipeline.</p>
                """,
                recipientProviders: [[$class: 'CulpritsRecipientProvider']],
                mimeType: 'text/html'
            )
            echo 'Pipeline completed successfully!'
        }
        failure {
            emailext (
                subject: "FAILED: Hospital Management Tests - Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: """
                    <h2>Test Execution Failed!</h2>
                    <p><strong>Job:</strong> ${env.JOB_NAME} [${env.BUILD_NUMBER}]</p>
                    <p><strong>Build URL:</strong> <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>
                    <p><strong>Status:</strong> One or more tests failed</p>
                    <p><strong>Duration:</strong> ${currentBuild.durationString}</p>
                    <br>
                    <p>Please check the build console for detailed error information.</p>
                    <p>This email was automatically generated by Jenkins CI/CD pipeline.</p>
                """,
                recipientProviders: [[$class: 'CulpritsRecipientProvider']],
                mimeType: 'text/html'
            )
            echo 'Pipeline failed!'
        }
        unstable {
            emailext (
                subject: "UNSTABLE: Hospital Management Tests - Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: """
                    <h2>Test Execution Unstable!</h2>
                    <p><strong>Job:</strong> ${env.JOB_NAME} [${env.BUILD_NUMBER}]</p>
                    <p><strong>Build URL:</strong> <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>
                    <p><strong>Status:</strong> Tests completed but with warnings</p>
                    <p><strong>Duration:</strong> ${currentBuild.durationString}</p>
                    <br>
                    <p>Please review the test results for any warnings or issues.</p>
                    <p>This email was automatically generated by Jenkins CI/CD pipeline.</p>
                """,
                recipientProviders: [[$class: 'CulpritsRecipientProvider']],
                mimeType: 'text/html'
            )
        }
    }
} 